import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn import neighbors
from sklearn.metrics import mean_squared_error
from math import sqrt
import matplotlib.pyplot as plt


df = pd.read_csv('helen 1.csv')
print(df)

df.isnull().sum()
#missing values in Item_weight and Outlet_size needs to be imputed

mean = df['eegRawValue'].mean() #imputing item_weight with mean
print(df['eegRawValue'].fillna(mean, inplace =True))


mode = df['eegRawValueVolts'].mode() #imputing outlet size with mode
print(df['eegRawValueVolts'].fillna(mode[0], inplace =True))

df.drop(['tagEvent', 'location','poorSignal','timestampMs'], axis=1, inplace=True)
df = pd.get_dummies(df)
print(df)

#creating train and test data

train , test = train_test_split(df, test_size = 0.3)

x_train = train.drop('attention', axis=1)
y_train = train['attention']
print(x_train)
print(y_train)

x_test = test.drop('eegRawValue', axis = 1)
y_test = test['eegRawValue']
print(x_test)
print(y_test)

#rescaling of data

scaler = MinMaxScaler(feature_range=(0, 1))

x_train_scaled = scaler.fit_transform(x_train)
x_train = pd.DataFrame(x_train_scaled)
print(x_train)

x_test_scaled = scaler.fit_transform(x_test)
x_test = pd.DataFrame(x_test_scaled)
print(x_test)

rmse_val = [] #to store rmse values for different k
for K in range(20):
    K = K+1
    model = neighbors.KNeighborsRegressor(n_neighbors = K)

    model.fit(x_train, y_train)  #fit the model
    pred=model.predict(x_test)#make prediction on test set
    print('the value for pred is--',pred)
    error = sqrt(mean_squared_error(y_test,pred)) #calculate rmse
    rmse_val.append(error) #store rmse values
    print('RMSE value for k= ' , K , 'is:', error)

#plotting the rmse values against k values
curve = pd.DataFrame(rmse_val) #elbow curve
curve.plot()
plt.show()


# K=9 neighbours

